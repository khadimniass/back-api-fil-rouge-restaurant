security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    enable_authenticator_manager: true
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: login
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~
       
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/docs, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/clients$, roles: PUBLIC_ACCESS, methods: POST }
        - { path: ^/api/gestionnaires$, roles: PUBLIC_ACCESS, methods: POST }
        - { path: ^/api/burgers, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/burgers$, roles: ROLE_GESTIONNAIRE, methods: POST }
        - { path: ^/api/boissons, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/menus, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/produits, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/catalogues$, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/complements$, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/zones$, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/menu_boissons, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/menu_tailles$, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/taille_boissons, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/commandes, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: PUBLIC_ACCESS }
        - { path: ^/api/frites, roles: PUBLIC_ACCESS}
        - { path: ^/api/menu_tailles, roles: PUBLIC_ACCESS}
        - { path: ^/api/livreurs, roles: PUBLIC_ACCESS}

        - { path: ^/api/livreurs, roles: ROLE_GESTIONNAIRE}
        - { path: ^/api/livraisons, roles: ROLE_GESTIONNAIRE}
        - { path: ^/api/users/validate, roles: PUBLIC_ACCESS, methods: PATCH }
        - { path: ^/api$, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/commandes, roles: PUBLIC_ACCESS, methods: GET }
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
